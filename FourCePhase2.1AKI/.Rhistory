len = length(cr)
day_pos = day
for(i in 1:len) {
if(lag) {
j = max(1,i-gap)
pos = j-1+which.min(cr[j:i])
day_pos[i] = day[pos]
} else {
j = min(i+gap,len)
pos = i-1+which.min(cr[i:j])
day_pos[i] = day[pos]
}
}
day_pos
}
which.peaks <- function(x,partial=TRUE,decreasing=FALSE) {
if(decreasing) {
if(partial) {
which(diff(c(FALSE,diff(x) > 0,TRUE)) > 0)
} else {
which(diff(diff(x)>0)>0) + 1
}
} else {
if(partial) {
which(diff(c(TRUE,diff(x) >= 0,FALSE)) < 0)
} else {
which(diff(diff(x)>=0)<0) + 1
}
}
}
save.image("~/Byorn/AKI-CKD/Data/action2_data_v1.3.RData")
labs_cr_aki <- labs_cr_tmp
# Scenario (1): AKI occurs during admission
# Find minimum Cr level in a rolling 90 day timeframe
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission)-90,max(days_since_admission)))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_90d = roll_min(value,8,fill=NA,na.rm=TRUE,partial=TRUE,align="right")) %>% filter(!is.na(value)) %>% ungroup()
# Find minimum Cr level in a rolling 2 day timeframe (48h)
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission)-2,max(days_since_admission)))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_48h = roll_min(value,3,fill=NA,na.rm=TRUE,partial=TRUE,align="right")) %>% filter(!is.na(value)) %>% ungroup()
# Scenario (2): Patient presents with an AKI already on board
# Find minimum Cr level in a rolling 7 day timeframe
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission),max(days_since_admission)+7))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_retro_7day = roll_min(value,8,fill=NA,na.rm=TRUE,partial=TRUE,align="left")) %>% filter(!is.na(value)) %>% ungroup()
# Find minimum Cr level in a rolling 2 day timeframe (48h)
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission),max(days_since_admission)+2))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_48h_retro = roll_min(value,3,fill=NA,na.rm=TRUE,partial=TRUE,align="left")) %>% filter(!is.na(value)) %>% ungroup()
# Another outcome we are interested in is to look at acute kidney disease, AKD (in between AKI and CKD)
# We will use the definitions proposed for AKD as described by Chawla et. al. 2017 (ref (1))
# We are interested in renal recovery at the 7-day and 90-day timepoint
# We will use a cutoff of recovery to 1.25x baseline Cr as recovery, as used in ref (2)
# References:
# 1. Chawla, L., Bellomo, R., Bihorac, A. et al. Acute kidney disease and renal recovery: consensus report
#    of the Acute Disease Quality Initiative (ADQI) 16 Workgroup. Nat Rev Nephrol 13, 241-257 (2017).
#    https://doi.org/10.1038/nrneph.2017.2
# 2. Pannu, N., James, M., Hemmelgarn, B. & Klarenbach, S. Association between AKI, Recovery of Renal
#    Function, and Long-Term Outcomes after Hospital Discharge. Clinical Journal of the American Society of
#    Nephrology 8, 194-202 (2013). https://doi.org/10.2215/CJN.06480612
# Generate sCr levels at +7d (cr_7d) and +90d (cr_90d) timepoints (for determining post-AKI recovery, AKD)
labs_cr_aki <- setDT(labs_cr_aki)[,':='(cr_7d = tail(labs_cr_aki$value[labs_cr_aki$patient_id==patient_id][between(labs_cr_aki$days_since_admission[labs_cr_aki$patient_id==patient_id],days_since_admission,days_since_admission+7,incbounds = TRUE)],1),cr_90d = tail(labs_cr_aki$value[labs_cr_aki$patient_id==patient_id][between(labs_cr_aki$days_since_admission[labs_cr_aki$patient_id==patient_id],days_since_admission,days_since_admission+90,incbounds = TRUE)],1)),by=c('patient_id','days_since_admission')][]
# At this point, our table has these headers:
# patient_id  siteid  days_since_admission  value min_cr_90d min_cr_48h  min_cr_retro_7day min_cr_48h_retro  cr_7d cr_90d
# Now we have to start grading AKI severity at each time point
# This approach is similar to how the MIMIC-III dataset generates AKI severity
# Generate two columns using both the formal KDIGO AKI definition and the modified retrospective AKI definition
labs_cr_aki$aki_kdigo <- apply(labs_cr_aki,1,aki_kdigo_grade)
labs_cr_aki$aki_kdigo_retro <- apply(labs_cr_aki,1,aki_kdigo_grade_retro)
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id,days_since_admission) %>% mutate(aki_kdigo_final = max(aki_kdigo,aki_kdigo_retro)) %>% ungroup()
# Generate two columns grading AKD severity at 7d and 90d (grade 0B/C is coded as 0.5)
labs_cr_aki$akd_7d <- apply(labs_cr_aki,1,akd_grade_7d)
labs_cr_aki$akd_90d <- apply(labs_cr_aki,1,akd_grade_90d)
# Now we are going to generate the start days of each AKI
labs_cr_aki_tmp <- labs_cr_aki
labs_cr_aki_tmp$valid = 1
# Find the day of the minimum Cr used for grading AKIs (taken as baseline)
labs_cr_aki_tmp <- labs_cr_aki_tmp %>% group_by(patient_id) %>% complete(days_since_admission = full_seq(days_since_admission,1)) %>% mutate(value = na.fill(value,Inf))
labs_cr_aki_tmp2 <- labs_cr_aki_tmp
labs_cr_aki_tmp3 <- labs_cr_aki_tmp
labs_cr_aki_tmp2 <- labs_cr_aki_tmp2 %>% split(.$patient_id) %>% map(~pos_min(.$value,.$days_since_admission)) %>% map_df(~data_frame(.x),.id='patient_id')
colnames(labs_cr_aki_tmp2)[2] <- "day_min"
labs_cr_aki_tmp3 <- labs_cr_aki_tmp3 %>% split(.$patient_id) %>% map(~pos_min(.$value,.$days_since_admission,lag=FALSE)) %>% map_df(~data_frame(.x),.id='patient_id')
colnames(labs_cr_aki_tmp3)[2] <- "day_min_retro"
labs_cr_aki_tmp4 <- cbind(labs_cr_aki_tmp,"day_min" = labs_cr_aki_tmp2$day_min,"day_min_retro" = labs_cr_aki_tmp3$day_min_retro)
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4[!is.na(labs_cr_aki_tmp4$valid),]
# Generate delta_cr
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4 %>% group_by(patient_id,days_since_admission) %>% mutate(min_cr_7d_final = min(min_cr_90d,min_cr_retro_7day)) %>% mutate(delta_cr = value - min_cr_7d_final)
# Use the largest delta_cr to find the peak of each AKI
labs_cr_aki_delta_maxima <- labs_cr_aki_tmp4 %>% group_by(patient_id) %>% summarise(days_since_admission=days_since_admission[which.peaks(delta_cr,decreasing=FALSE)],delta_maxima = delta_cr[which.peaks(delta_cr,decreasing=FALSE)])
labs_cr_aki_delta_maxima$delta_is_max = 1
labs_cr_aki_tmp4 <- merge(labs_cr_aki_tmp4,labs_cr_aki_delta_maxima,by=c("patient_id","days_since_admission"),all.x=TRUE)
# Filter for KDIGO grades > 0
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4[labs_cr_aki_tmp4$aki_kdigo_final > 0,]
labs_cr_aki_tmp4[is.na(labs_cr_aki_tmp4)] <- 0
# Filter for maxima of delta_cr (which should give us the peaks)
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4[labs_cr_aki_tmp4$delta_is_max > 0,]
# Filter and reorder columns to generate our final table of all AKI events
labs_aki_summ <- labs_cr_aki_tmp4 %>% select(patient_id,siteid,days_since_admission,value,day_min,day_min_retro,min_cr_90d,min_cr_48h,min_cr_retro_7day,min_cr_48h_retro,min_cr_7d_final,cr_7d,cr_90d,delta_cr,aki_kdigo,aki_kdigo_retro,aki_kdigo_final,akd_7d,akd_90d)
# Remove our temporary tables (comment these out to check output)
rm(labs_cr_aki_tmp)
rm(labs_cr_aki_tmp2)
rm(labs_cr_aki_tmp3)
rm(labs_cr_aki_tmp4)
# Scenario (1): AKI occurs during admission
# Find minimum Cr level in a rolling 90 day timeframe
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission)-90,max(days_since_admission)))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_90d = roll_min(value,90,fill=NA,na.rm=TRUE,partial=TRUE,align="right")) %>% filter(!is.na(value)) %>% ungroup()
# Find minimum Cr level in a rolling 2 day timeframe (48h)
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission)-2,max(days_since_admission)))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_48h = roll_min(value,3,fill=NA,na.rm=TRUE,partial=TRUE,align="right")) %>% filter(!is.na(value)) %>% ungroup()
# Scenario (2): Patient presents with an AKI already on board
# Find minimum Cr level in a rolling 7 day timeframe
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission),max(days_since_admission)+7))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_retro_7day = roll_min(value,8,fill=NA,na.rm=TRUE,partial=TRUE,align="left")) %>% filter(!is.na(value)) %>% ungroup()
# Find minimum Cr level in a rolling 2 day timeframe (48h)
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission),max(days_since_admission)+2))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_48h_retro = roll_min(value,3,fill=NA,na.rm=TRUE,partial=TRUE,align="left")) %>% filter(!is.na(value)) %>% ungroup()
# Another outcome we are interested in is to look at acute kidney disease, AKD (in between AKI and CKD)
# We will use the definitions proposed for AKD as described by Chawla et. al. 2017 (ref (1))
# We are interested in renal recovery at the 7-day and 90-day timepoint
# We will use a cutoff of recovery to 1.25x baseline Cr as recovery, as used in ref (2)
# References:
# 1. Chawla, L., Bellomo, R., Bihorac, A. et al. Acute kidney disease and renal recovery: consensus report
#    of the Acute Disease Quality Initiative (ADQI) 16 Workgroup. Nat Rev Nephrol 13, 241-257 (2017).
#    https://doi.org/10.1038/nrneph.2017.2
# 2. Pannu, N., James, M., Hemmelgarn, B. & Klarenbach, S. Association between AKI, Recovery of Renal
#    Function, and Long-Term Outcomes after Hospital Discharge. Clinical Journal of the American Society of
#    Nephrology 8, 194-202 (2013). https://doi.org/10.2215/CJN.06480612
# Generate sCr levels at +7d (cr_7d) and +90d (cr_90d) timepoints (for determining post-AKI recovery, AKD)
labs_cr_aki <- setDT(labs_cr_aki)[,':='(cr_7d = tail(labs_cr_aki$value[labs_cr_aki$patient_id==patient_id][between(labs_cr_aki$days_since_admission[labs_cr_aki$patient_id==patient_id],days_since_admission,days_since_admission+7,incbounds = TRUE)],1),cr_90d = tail(labs_cr_aki$value[labs_cr_aki$patient_id==patient_id][between(labs_cr_aki$days_since_admission[labs_cr_aki$patient_id==patient_id],days_since_admission,days_since_admission+90,incbounds = TRUE)],1)),by=c('patient_id','days_since_admission')][]
# At this point, our table has these headers:
# patient_id  siteid  days_since_admission  value min_cr_90d min_cr_48h  min_cr_retro_7day min_cr_48h_retro  cr_7d cr_90d
# Now we have to start grading AKI severity at each time point
# This approach is similar to how the MIMIC-III dataset generates AKI severity
# Generate two columns using both the formal KDIGO AKI definition and the modified retrospective AKI definition
labs_cr_aki$aki_kdigo <- apply(labs_cr_aki,1,aki_kdigo_grade)
labs_cr_aki$aki_kdigo_retro <- apply(labs_cr_aki,1,aki_kdigo_grade_retro)
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id,days_since_admission) %>% mutate(aki_kdigo_final = max(aki_kdigo,aki_kdigo_retro)) %>% ungroup()
# Generate two columns grading AKD severity at 7d and 90d (grade 0B/C is coded as 0.5)
labs_cr_aki$akd_7d <- apply(labs_cr_aki,1,akd_grade_7d)
labs_cr_aki$akd_90d <- apply(labs_cr_aki,1,akd_grade_90d)
# Now we are going to generate the start days of each AKI
labs_cr_aki_tmp <- labs_cr_aki
labs_cr_aki_tmp$valid = 1
# Find the day of the minimum Cr used for grading AKIs (taken as baseline)
labs_cr_aki_tmp <- labs_cr_aki_tmp %>% group_by(patient_id) %>% complete(days_since_admission = full_seq(days_since_admission,1)) %>% mutate(value = na.fill(value,Inf))
labs_cr_aki_tmp2 <- labs_cr_aki_tmp
labs_cr_aki_tmp3 <- labs_cr_aki_tmp
labs_cr_aki_tmp2 <- labs_cr_aki_tmp2 %>% split(.$patient_id) %>% map(~pos_min(.$value,.$days_since_admission)) %>% map_df(~data_frame(.x),.id='patient_id')
colnames(labs_cr_aki_tmp2)[2] <- "day_min"
labs_cr_aki_tmp3 <- labs_cr_aki_tmp3 %>% split(.$patient_id) %>% map(~pos_min(.$value,.$days_since_admission,lag=FALSE)) %>% map_df(~data_frame(.x),.id='patient_id')
colnames(labs_cr_aki_tmp3)[2] <- "day_min_retro"
labs_cr_aki_tmp4 <- cbind(labs_cr_aki_tmp,"day_min" = labs_cr_aki_tmp2$day_min,"day_min_retro" = labs_cr_aki_tmp3$day_min_retro)
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4[!is.na(labs_cr_aki_tmp4$valid),]
# Generate delta_cr
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4 %>% group_by(patient_id,days_since_admission) %>% mutate(min_cr_7d_final = min(min_cr_90d,min_cr_retro_7day)) %>% mutate(delta_cr = value - min_cr_7d_final)
# Use the largest delta_cr to find the peak of each AKI
labs_cr_aki_delta_maxima <- labs_cr_aki_tmp4 %>% group_by(patient_id) %>% summarise(days_since_admission=days_since_admission[which.peaks(delta_cr,decreasing=FALSE)],delta_maxima = delta_cr[which.peaks(delta_cr,decreasing=FALSE)])
labs_cr_aki_delta_maxima$delta_is_max = 1
labs_cr_aki_tmp4 <- merge(labs_cr_aki_tmp4,labs_cr_aki_delta_maxima,by=c("patient_id","days_since_admission"),all.x=TRUE)
# Filter for KDIGO grades > 0
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4[labs_cr_aki_tmp4$aki_kdigo_final > 0,]
labs_cr_aki_tmp4[is.na(labs_cr_aki_tmp4)] <- 0
# Filter for maxima of delta_cr (which should give us the peaks)
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4[labs_cr_aki_tmp4$delta_is_max > 0,]
# Filter and reorder columns to generate our final table of all AKI events
labs_aki_summ <- labs_cr_aki_tmp4 %>% select(patient_id,siteid,days_since_admission,value,day_min,day_min_retro,min_cr_90d,min_cr_48h,min_cr_retro_7day,min_cr_48h_retro,min_cr_7d_final,cr_7d,cr_90d,delta_cr,aki_kdigo,aki_kdigo_retro,aki_kdigo_final,akd_7d,akd_90d)
# Remove our temporary tables (comment these out to check output)
rm(labs_cr_aki_tmp)
rm(labs_cr_aki_tmp2)
rm(labs_cr_aki_tmp3)
rm(labs_cr_aki_tmp4)
labs_cr_aki <- labs_cr_tmp
source('~/.active-rstudio-document', echo=TRUE)
View(labs_aki_summ)
labs_cr_aki <- labs_cr_tmp
source('~/Byorn/AKI-CKD/Data/aki_detection_action.R', echo=TRUE)
View(labs_aki_summ)
labs_cr_aki <- labs_cr_tmp
View(labs_cr_aki)
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id,days_since_admission) %>% mutate(value = mean(value)) %>% ungroup() %>% group_by(patient_id) %>% distinct()
source('~/Byorn/AKI-CKD/Data/aki_detection_action.R', echo=TRUE)
View(labs_aki_summ)
write.csv(labs_aki_summ,"all_aki_events.csv",row.names=FALSE)
labs_index_aki <- labs_aki_summ %>% group_by(patient_id) %>% filter(days_since_admission == min(days_since_admission))
View(labs_index_aki)
admissions_index_aki <- admissions_demog_date[admissions_demog_date$Case.No %in% labs_index_aki$visit_id,]
View(admission_index_aki)
View(admissions_index_aki)
admissions_index_aki_tmp <- admissions_index_aki %>% select(Patient.NRIC,Case.No,Adm.Date)
View(admissions_index_aki_tmp)
colnames(admissions_index_aki_tmp) <- c("patient_id","visit_id","index_aki_adm")
View(admissions_demog_date)
admissions_after_aki <- admissions_demog_date
colnames(admissions_after_aki) <- c("patient_id","visit_id","age","sex","race","admission_date","discharge_date")
admissions_after_aki <- merge(admissions_after_aki,admissions_index_aki_tmp,by="patient_id",all.x=TRUE)
View(admissions_after_aki)
admissions_after_aki <- admissions_after_aki[!is.na(admissions_after_aki$index_aki_adm),]
admissions_after_aki <- admissions_after_aki[,c(1:6,9)]
colnames(admissions_after_aki)[2] <- "visit_id"
admissions_after_aki <- admissions_after_aki %>% group_by(patient_id) %>% mutate(days_since_admission = as.numeric(index_aki_adm - admission_date))
admissions_after_aki <- admissions_after_aki %>% group_by(patient_id) %>% filter(days_since_admission >= 0)
admissions_after_aki <- admissions_after_aki %>% group_by(patient_id) %>% arrange(days_since_admission)
admissions_after_aki <- admissions_after_aki %>% arrange(patient_id,days_since_admission)
write.csv(admissions_after_aki,"admissions_after_index_aki.csv",row.names=FALSE)
admissions_after_aki <- admissions_after_aki %>% group_by(patient_id) %>% mutate(total_visits = count(distinct(visit_id)))
admissions_after_aki <- admissions_after_aki %>% group_by(patient_id) %>% mutate(total_visits = length(distinct(visit_id)))
admissions_after_aki <- admissions_after_aki %>% group_by(patient_id) %>% mutate(total_visits = length(unique(visit_id)))
admissions_after_aki_rv <- admissions_after_aki %>% group_by(patient_id) %>% filter(total_visits >= 2)
View(admissions_after_aki_rv)
write.csv(admissions_after_aki_rv,"admissions_afterIndexAki_withRV.csv",row.names=FALSE)
View(labs_all_patients_with_rv)
View(labs_all)
labs_all_rv <- labs_all[labs_all$Case.No %in% admissions_after_aki_rv$visit_id,]
View(labs_all_rv)
labs_all_rv <- labs_all_rv[,c(1,5,3,4)]
View(admissions_index_aki_tmp)
labs_all_rv <- labs_all_rv %>% mutate(lab_date = as.Date(Result.Test.Date))
labs_all_rv <- labs_all_rv[,c(1,5,3,4)]
save.image("~/Byorn/AKI-CKD/Data/action2_data_v1.4.RData")
severe_label <- data.table(c(1,2,3,4),c("Non-severe, no AKI","Non-severe, AKI","Severe, no AKI","Severe, AKI"))
library(data.table)
severe_label <- data.table(c(1,2,3,4),c("Non-severe, no AKI","Non-severe, AKI","Severe, no AKI","Severe, AKI"))
colnames(severe_label) <- c("severe","severe_label")
View(severe_label)
load("~/Byorn/AKI-CKD/Data/action2_data_v1.4.RData")
View(labs_cr_aki_corrDate_rv)
View(labs_aki_summ_corrDate)
pos_min <- function(cr,day,lag=TRUE,gap=90) {
len = length(cr)
day_pos = day
for(i in 1:len) {
if(lag) {
j = max(1,i-gap)
pos = j-1+which.min(cr[j:i])
day_pos[i] = day[pos]
} else {
j = min(i+gap,len)
pos = i-1+which.min(cr[i:j])
day_pos[i] = day[pos]
}
}
day_pos
}
View(labs_cr_aki)
# Scenario (1): AKI occurs during admission
# Find minimum Cr level in a rolling 365 day timeframe
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission)-365,max(days_since_admission)))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_365d = roll_min(value,366,fill=NA,na.rm=TRUE,partial=TRUE,align="right")) %>% filter(!is.na(value)) %>% ungroup()
# Find minimum Cr level in a rolling 2 day timeframe (48h)
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission)-2,max(days_since_admission)))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_48h = roll_min(value,3,fill=NA,na.rm=TRUE,partial=TRUE,align="right")) %>% filter(!is.na(value)) %>% ungroup()
# Scenario (2): Patient presents with an AKI already on board
# Find minimum Cr level in a rolling 7 day timeframe
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission),max(days_since_admission)+7))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_retro_7day = roll_min(value,8,fill=NA,na.rm=TRUE,partial=TRUE,align="left")) %>% filter(!is.na(value)) %>% ungroup()
# Find minimum Cr level in a rolling 2 day timeframe (48h)
labs_cr_aki <- data.table(labs_cr_aki,key=c("patient_id","days_since_admission"))
labs_cr_aki <- labs_cr_aki[CJ(unique(patient_id),seq(min(days_since_admission),max(days_since_admission)+2))] # temporarily fill in null rows for missing days - the minimum rolling code only works for consecutive data
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id) %>% mutate(min_cr_48h_retro = roll_min(value,3,fill=NA,na.rm=TRUE,partial=TRUE,align="left")) %>% filter(!is.na(value)) %>% ungroup()
# Another outcome we are interested in is to look at acute kidney disease, AKD (in between AKI and CKD)
# We will use the definitions proposed for AKD as described by Chawla et. al. 2017 (ref (1))
# We are interested in renal recovery at the 7-day and 90-day timepoint
# We will use a cutoff of recovery to 1.25x baseline Cr as recovery, as used in ref (2)
# References:
# 1. Chawla, L., Bellomo, R., Bihorac, A. et al. Acute kidney disease and renal recovery: consensus report
#    of the Acute Disease Quality Initiative (ADQI) 16 Workgroup. Nat Rev Nephrol 13, 241-257 (2017).
#    https://doi.org/10.1038/nrneph.2017.2
# 2. Pannu, N., James, M., Hemmelgarn, B. & Klarenbach, S. Association between AKI, Recovery of Renal
#    Function, and Long-Term Outcomes after Hospital Discharge. Clinical Journal of the American Society of
#    Nephrology 8, 194-202 (2013). https://doi.org/10.2215/CJN.06480612
# Generate sCr levels at +7d (cr_7d) and +90d (cr_90d) timepoints (for determining post-AKI recovery, AKD)
labs_cr_aki <- setDT(labs_cr_aki)[,':='(cr_7d = tail(labs_cr_aki$value[labs_cr_aki$patient_id==patient_id][between(labs_cr_aki$days_since_admission[labs_cr_aki$patient_id==patient_id],days_since_admission,days_since_admission+7,incbounds = TRUE)],1),cr_90d = tail(labs_cr_aki$value[labs_cr_aki$patient_id==patient_id][between(labs_cr_aki$days_since_admission[labs_cr_aki$patient_id==patient_id],days_since_admission,days_since_admission+90,incbounds = TRUE)],1)),by=c('patient_id','days_since_admission')][]
# At this point, our table has these headers:
# patient_id  visit_id  days_since_admission  value min_cr_365d min_cr_48h  min_cr_retro_7day min_cr_48h_retro  cr_7d cr_90d
# Now we have to start grading AKI severity at each time point
# This approach is similar to how the MIMIC-III dataset generates AKI severity
# Generate two columns using both the formal KDIGO AKI definition and the modified retrospective AKI definition
labs_cr_aki$aki_kdigo <- apply(labs_cr_aki,1,aki_kdigo_grade)
labs_cr_aki$aki_kdigo_retro <- apply(labs_cr_aki,1,aki_kdigo_grade_retro)
labs_cr_aki <- labs_cr_aki %>% group_by(patient_id,days_since_admission) %>% mutate(aki_kdigo_final = max(aki_kdigo,aki_kdigo_retro)) %>% ungroup()
# Generate two columns grading AKD severity at 7d and 90d (grade 0B/C is coded as 0.5)
labs_cr_aki$akd_7d <- apply(labs_cr_aki,1,akd_grade_7d)
labs_cr_aki$akd_90d <- apply(labs_cr_aki,1,akd_grade_90d)
# Now we are going to generate the start days of each AKI
labs_cr_aki_tmp <- labs_cr_aki
labs_cr_aki_tmp$valid = 1
# Find the day of the minimum Cr used for grading AKIs (taken as baseline)
labs_cr_aki_tmp <- labs_cr_aki_tmp %>% group_by(patient_id) %>% complete(days_since_admission = full_seq(days_since_admission,1)) %>% mutate(value = na.fill(value,Inf))
labs_cr_aki_tmp2 <- labs_cr_aki_tmp
labs_cr_aki_tmp3 <- labs_cr_aki_tmp
labs_cr_aki_tmp2 <- labs_cr_aki_tmp2 %>% split(.$patient_id) %>% map(~pos_min(.$value,.$days_since_admission)) %>% map_df(~data_frame(.x),.id='patient_id')
colnames(labs_cr_aki_tmp2)[2] <- "day_min"
labs_cr_aki_tmp3 <- labs_cr_aki_tmp3 %>% split(.$patient_id) %>% map(~pos_min(.$value,.$days_since_admission,lag=FALSE)) %>% map_df(~data_frame(.x),.id='patient_id')
colnames(labs_cr_aki_tmp3)[2] <- "day_min_retro"
labs_cr_aki_tmp4 <- cbind(labs_cr_aki_tmp,"day_min" = labs_cr_aki_tmp2$day_min,"day_min_retro" = labs_cr_aki_tmp3$day_min_retro)
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4[!is.na(labs_cr_aki_tmp4$valid),]
# Generate delta_cr
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4 %>% group_by(patient_id,days_since_admission) %>% mutate(min_cr_7d_final = min(min_cr_365d,min_cr_retro_7day)) %>% mutate(delta_cr = value - min_cr_7d_final)
# Use the largest delta_cr to find the peak of each AKI
labs_cr_aki_delta_maxima <- labs_cr_aki_tmp4 %>% group_by(patient_id) %>% summarise(days_since_admission=days_since_admission[which.peaks(delta_cr,decreasing=FALSE)],delta_maxima = delta_cr[which.peaks(delta_cr,decreasing=FALSE)])
labs_cr_aki_delta_maxima$delta_is_max = 1
labs_cr_aki_tmp4 <- merge(labs_cr_aki_tmp4,labs_cr_aki_delta_maxima,by=c("patient_id","days_since_admission"),all.x=TRUE)
# Filter for KDIGO grades > 0
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4[labs_cr_aki_tmp4$aki_kdigo_final > 0,]
labs_cr_aki_tmp4[is.na(labs_cr_aki_tmp4)] <- 0
# Filter for maxima of delta_cr (which should give us the peaks)
labs_cr_aki_tmp4 <- labs_cr_aki_tmp4[labs_cr_aki_tmp4$delta_is_max > 0,]
# Filter and reorder columns to generate our final table of all AKI events
labs_aki_summ <- labs_cr_aki_tmp4 %>% select(patient_id,visit_id,days_since_admission,value,day_min,day_min_retro,min_cr_365d,min_cr_48h,min_cr_retro_7day,min_cr_48h_retro,min_cr_7d_final,cr_7d,cr_90d,delta_cr,aki_kdigo,aki_kdigo_retro,aki_kdigo_final,akd_7d,akd_90d)
# Remove our temporary tables (comment these out to check output)
rm(labs_cr_aki_tmp)
rm(labs_cr_aki_tmp2)
rm(labs_cr_aki_tmp3)
rm(labs_cr_aki_tmp4)
load("~/Byorn/AKI-CKD/Data/action2_data_v1.4.RData")
source('~/Byorn/AKI-CKD/Data/aki_detection_action.R', echo=TRUE)
View(labs_aki_summ)
source('~/Byorn/AKI-CKD/Data/aki_detection_action.R', echo=TRUE)
View(index_aki_summ)
View(index_aki_summ)
load("~/Byorn/AKI-CKD/Data/action2_data_v1.6.RData")
library(tidyverse)
library(zoo)
library(survival)
library(survminer)
library(forestmodel)
library(officer)
library(rvg)
create_pptx <- function(plot, path){
if(!file.exists(path)) {
out <- read_pptx()
} else {
out <- read_pptx(path)
}
anyplot=dml(code=print(plot))
out <- add_slide(out,"Title and Content","Office Theme")
out <- ph_with(out,anyplot,location=ph_location_fullsize())
print(out,target=path)
}
km_perfect <- km_including_action1excl %>% group_by(patient_id) %>% mutate(agegroup = get_agegroup(age),agegroup2=get_agegroup2(age)) %>% filter(patient_id %in% labs_aki_summ_corrDate$patient_id)
km_perfect_nopriorrrt <- km_perfect[km_perfect$already_rrt == 0,]
km_perfect_norrt <- km_perfect[km_perfect$rrt == 0,]
pretty_rrt<- km_perfect_nopriorrrt %>% transmute(time=aki_admit_to_rrt,RRT=as.numeric(deceased),Age=factor(agegroup2,levels=c("< 60yrs","60yrs and older")),Sex=factor(sex),Hypertension=factor(htn),DiabetesMellitus=factor(dm),IschaemicHeartDisease=factor(ihd),IndexAKIKDIGOGrade=factor(aki_kdigo_final,levels=c(1,2,3),labels=c("1","2","3")),MyelolymphoproliferativeDisorders=factor(myelolymph))
#pretty_rrt<- km_perfect_nopriorrrt %>% transmute(time=aki_admit_to_rrt,RRT=as.numeric(deceased),Age=factor(agegroup2),Sex=factor(sex),Hypertension=htn,DiabetesMellitus=dm,IschaemicHeartDisease=ihd,IndexAKIKDIGOGrade=factor(aki_kdigo_final),MyelolymphoproliferativeDisorders=myelolymph)
surv_rrt <- Surv(time=pretty_rrt$time,event=pretty_rrt$RRT)
fit_rrt_km <- survfit(surv_rrt ~ IndexAKIKDIGOGrade,data=pretty_rrt)
plot_rrt_km <- ggsurvplot(fit_rrt_km,data=pretty_rrt,pval=TRUE,conf.int=TRUE,risk.table=TRUE,risk.table.col = "strata", linetype = "strata",surv.median.line = "hv",ggtheme = theme_bw(),fun="event",ylab="Proportion Started on RRT",xlim=c(0,2000),break.x.by=365,legend.title="Index AKI KDIGO Stage",legend.labs=c("1","2","3"),xlab="Time to RRT (days)",palette="lancet")
print(plot_rrt_km)
cox_rrt <- coxph(surv_rrt ~ Age+Sex+Hypertension + DiabetesMellitus + IschaemicHeartDisease + MyelolymphoproliferativeDisorders+IndexAKIKDIGOGrade,data=pretty_rrt)
plot_rrt_cox <- ggforest(cox_rrt,data=pretty_rrt)
print(plot_rrt_cox)
plot_rrt_nice <- forest_model(cox_rrt,format_options = forest_model_format_options(text_size = 3.5,point_size=3),exponentiate = FALSE,limits = c(-1,1))
print(plot_rrt_nice)
create_pptx(plot_rrt_nice,"CoxPH_TimeToRRT_ProperCohort.pptx")
pretty_recovery <- km_perfect_norrt %>% transmute(time=time_to_ratio1.25,Recover=recover_1.25x,Age=factor(agegroup2,levels=c("< 60yrs","60yrs and older")),Sex=factor(sex),Hypertension=htn,DiabetesMellitus=dm,IschaemicHeartDisease=ihd,IndexAKIKDIGOGrade=factor(aki_kdigo_final,levels=c(1,2,3),labels=c("1","2","3")),MyelolymphoproliferativeDisorders=myelolymph)
#pretty_recovery <- km_perfect_norrt %>% transmute(time=time_to_ratio1.25,Recover=recover_1.25x,Age=factor(agegroup2),Sex=factor(sex),Hypertension=factor(htn),DiabetesMellitus=factor(dm),IschaemicHeartDisease=factor(ihd),IndexAKIKDIGOGrade=factor(aki_kdigo_final,levels=c(1,2,3),labels=c("1","2","3")),MyelolymphoproliferativeDisorders=factor(myelolymph))
surv_recovery <- Surv(time=pretty_recovery$time,event=pretty_recovery$Recover)
fit_recovery <- survfit(surv_recovery ~ IndexAKIKDIGOGrade,data=pretty_recovery)
plot_recovery <- ggsurvplot(fit_recovery,data=pretty_recovery,pval=TRUE,conf.int=TRUE,risk.table=TRUE,risk.table.col = "strata", linetype = "strata",surv.median.line = "hv",ggtheme = theme_bw(),fun="event",xlim=c(0,90),break.x.by=30,ylim=c(0,1),legend.title="Index AKI KDIGO Grade",legend.labs=c("1","2","3"),ylab="Proportion reaching 1.25x Baseline Cr")
print(plot_recovery)
cox_recovery <- coxph(surv_recovery ~ Age+Sex+Hypertension + DiabetesMellitus + IschaemicHeartDisease + MyelolymphoproliferativeDisorders + IndexAKIKDIGOGrade,data=pretty_recovery)
plot_recovery_cox <- ggforest(cox_recovery,data=pretty_recovery)
print(plot_recovery_cox)
plot_recovery_nice <- forest_model(cox_recovery,format_options = forest_model_format_options(text_size = 3.5,point_size=3),exponentiate = FALSE)
print(plot_recovery_nice)
create_pptx(plot_recovery,"KM_TimeTo1.25Baseline_ProperCohort.pptx")
create_pptx(plot_recovery_nice,"CoxPH_TimeTo1.25Baseline_ProperCohort.pptx")
# glm_recovery <- glm(Recover ~ Age+Sex+Hypertension + DiabetesMellitus + IschaemicHeartDisease + MyelolymphoproliferativeDisorders+IndexAKIKDIGOGrade,data=pretty_recovery,family=binomial())
# summary(glm_recovery)
# print(forest_model(glm_recovery,format_options = forest_model_format_options(text_size = 3.5,point_size=3),exponentiate = FALSE))
pretty_death <- km_perfect_nopriorrrt %>% transmute(time=aki_admit_to_death,Death=as.numeric(deceased),Age=factor(agegroup2),Sex=factor(sex),Hypertension=htn,DiabetesMellitus=dm,IschaemicHeartDisease=ihd,IndexAKIKDIGOGrade=factor(aki_kdigo_final),MyelolymphoproliferativeDisorders=myelolymph)
surv_death <- Surv(time=pretty_death$time,event=pretty_death$Death)
fit_death <- survfit(surv_death ~ IndexAKIKDIGOGrade,data=pretty_recovery)
plot_death_km <- ggsurvplot(fit_death,data=pretty_death,pval=TRUE,conf.int=TRUE,risk.table=TRUE,risk.table.col = "strata", linetype = "strata",surv.median.line = "hv",ggtheme = theme_bw(),legend.title="Index AKI KDIGO Grade",legend.labs=c("1","2","3"),ylab="Survival",break.x.by=365,xlab="Time since Index AKI (days)")
print(plot_death_km)
cox_death <- coxph(surv_death ~ Age+Sex+Hypertension + DiabetesMellitus + IschaemicHeartDisease + MyelolymphoproliferativeDisorders + IndexAKIKDIGOGrade,data=pretty_death)
#plot_death_pretty <- forest_model(cox_death_pretty)
plot_death_cox <- ggforest(cox_death,data=pretty_death)
print(plot_death_cox)
plot_death_nice <- forest_model(cox_death_pretty,format_options = forest_model_format_options(text_size = 3.5,point_size=3),exponentiate = FALSE)
print(plot_death_nice)
create_pptx(plot_death_km,"KM_TimeToDeath_NoPriorRRT_ProperCohort.pptx")
create_pptx(plot_death_nice,"CoxPH_TimeToDeath_NoPriorRRT_ProperCohort.pptx")
pretty_death <- km_perfect_nopriorrrt %>% transmute(time=aki_admit_to_death,Death=as.numeric(deceased),Age=factor(agegroup2),Sex=factor(sex),Hypertension=htn,DiabetesMellitus=dm,IschaemicHeartDisease=ihd,IndexAKIKDIGOGrade=factor(aki_kdigo_final),MyelolymphoproliferativeDisorders=myelolymph)
surv_death <- Surv(time=pretty_death$time,event=pretty_death$Death)
fit_death <- survfit(surv_death ~ IndexAKIKDIGOGrade,data=pretty_death)
plot_death_km <- ggsurvplot(fit_death,data=pretty_death,pval=TRUE,conf.int=TRUE,risk.table=TRUE,risk.table.col = "strata", linetype = "strata",surv.median.line = "hv",ggtheme = theme_bw(),legend.title="Index AKI KDIGO Grade",legend.labs=c("1","2","3"),ylab="Survival",break.x.by=365,xlab="Time since Index AKI (days)")
print(plot_death_km)
cox_death <- coxph(surv_death ~ Age+Sex+Hypertension + DiabetesMellitus + IschaemicHeartDisease + MyelolymphoproliferativeDisorders + IndexAKIKDIGOGrade,data=pretty_death)
#plot_death_pretty <- forest_model(cox_death_pretty)
plot_death_cox <- ggforest(cox_death,data=pretty_death)
print(plot_death_cox)
plot_death_nice <- forest_model(cox_death_pretty,format_options = forest_model_format_options(text_size = 3.5,point_size=3),exponentiate = FALSE)
print(plot_death_nice)
create_pptx(plot_death_km,"KM_TimeToDeath_NoPriorRRT_ProperCohort.pptx")
create_pptx(plot_death_nice,"CoxPH_TimeToDeath_NoPriorRRT_ProperCohort.pptx")
load("~/Byorn/AKI-CKD/Data/action2_data_v1.6.RData")
library(tidyverse)
library(zoo)
library(survival)
library(survminer)
library(forestmodel)
library(officer)
library(rvg)
create_pptx <- function(plot, path){
if(!file.exists(path)) {
out <- read_pptx()
} else {
out <- read_pptx(path)
}
anyplot=dml(code=print(plot))
out <- add_slide(out,"Title and Content","Office Theme")
out <- ph_with(out,anyplot,location=ph_location_fullsize())
print(out,target=path)
}
km_perfect <- km_including_action1excl %>% group_by(patient_id) %>% mutate(agegroup = get_agegroup(age),agegroup2=get_agegroup2(age)) %>% filter(patient_id %in% labs_aki_summ_corrDate$patient_id)
km_perfect_nopriorrrt <- km_perfect[km_perfect$already_rrt == 0,]
km_perfect_norrt <- km_perfect[km_perfect$rrt == 0,]
pretty_rrt<- km_perfect_nopriorrrt %>% transmute(time=aki_admit_to_rrt,RRT=as.numeric(deceased),Age=factor(agegroup2,levels=c("< 60yrs","60yrs and older")),Sex=factor(sex),Hypertension=factor(htn),DiabetesMellitus=factor(dm),IschaemicHeartDisease=factor(ihd),IndexAKIKDIGOGrade=factor(aki_kdigo_final,levels=c(1,2,3),labels=c("1","2","3")),MyelolymphoproliferativeDisorders=factor(myelolymph))
#pretty_rrt<- km_perfect_nopriorrrt %>% transmute(time=aki_admit_to_rrt,RRT=as.numeric(deceased),Age=factor(agegroup2),Sex=factor(sex),Hypertension=htn,DiabetesMellitus=dm,IschaemicHeartDisease=ihd,IndexAKIKDIGOGrade=factor(aki_kdigo_final),MyelolymphoproliferativeDisorders=myelolymph)
surv_rrt <- Surv(time=pretty_rrt$time,event=pretty_rrt$RRT)
fit_rrt_km <- survfit(surv_rrt ~ IndexAKIKDIGOGrade,data=pretty_rrt)
plot_rrt_km <- ggsurvplot(fit_rrt_km,data=pretty_rrt,pval=TRUE,conf.int=TRUE,risk.table=TRUE,risk.table.col = "strata", linetype = "strata",surv.median.line = "hv",ggtheme = theme_bw(),fun="event",ylab="Proportion Started on RRT",xlim=c(0,2000),break.x.by=365,legend.title="Index AKI KDIGO Stage",legend.labs=c("1","2","3"),xlab="Time to RRT (days)",palette="lancet")
print(plot_rrt_km)
cox_rrt <- coxph(surv_rrt ~ Age+Sex+Hypertension + DiabetesMellitus + IschaemicHeartDisease + MyelolymphoproliferativeDisorders+IndexAKIKDIGOGrade,data=pretty_rrt)
plot_rrt_cox <- ggforest(cox_rrt,data=pretty_rrt)
print(plot_rrt_cox)
plot_rrt_nice <- forest_model(cox_rrt,format_options = forest_model_format_options(text_size = 3.5,point_size=3),exponentiate = FALSE,limits = c(-1,1))
print(plot_rrt_nice)
create_pptx(plot_rrt_nice,"CoxPH_TimeToRRT_ProperCohort.pptx")
pretty_recovery <- km_perfect_norrt %>% transmute(time=time_to_ratio1.25,Recover=recover_1.25x,Age=factor(agegroup2,levels=c("< 60yrs","60yrs and older")),Sex=factor(sex),Hypertension=htn,DiabetesMellitus=dm,IschaemicHeartDisease=ihd,IndexAKIKDIGOGrade=factor(aki_kdigo_final,levels=c(1,2,3),labels=c("1","2","3")),MyelolymphoproliferativeDisorders=myelolymph)
#pretty_recovery <- km_perfect_norrt %>% transmute(time=time_to_ratio1.25,Recover=recover_1.25x,Age=factor(agegroup2),Sex=factor(sex),Hypertension=factor(htn),DiabetesMellitus=factor(dm),IschaemicHeartDisease=factor(ihd),IndexAKIKDIGOGrade=factor(aki_kdigo_final,levels=c(1,2,3),labels=c("1","2","3")),MyelolymphoproliferativeDisorders=factor(myelolymph))
surv_recovery <- Surv(time=pretty_recovery$time,event=pretty_recovery$Recover)
fit_recovery <- survfit(surv_recovery ~ IndexAKIKDIGOGrade,data=pretty_recovery)
plot_recovery <- ggsurvplot(fit_recovery,data=pretty_recovery,pval=TRUE,conf.int=TRUE,risk.table=TRUE,risk.table.col = "strata", linetype = "strata",surv.median.line = "hv",ggtheme = theme_bw(),fun="event",xlim=c(0,90),break.x.by=30,ylim=c(0,1),legend.title="Index AKI KDIGO Grade",legend.labs=c("1","2","3"),ylab="Proportion reaching 1.25x Baseline Cr")
print(plot_recovery)
cox_recovery <- coxph(surv_recovery ~ Age+Sex+Hypertension + DiabetesMellitus + IschaemicHeartDisease + MyelolymphoproliferativeDisorders + IndexAKIKDIGOGrade,data=pretty_recovery)
plot_recovery_cox <- ggforest(cox_recovery,data=pretty_recovery)
print(plot_recovery_cox)
plot_recovery_nice <- forest_model(cox_recovery,format_options = forest_model_format_options(text_size = 3.5,point_size=3),exponentiate = FALSE)
print(plot_recovery_nice)
create_pptx(plot_recovery,"KM_TimeTo1.25Baseline_ProperCohort.pptx")
create_pptx(plot_recovery_nice,"CoxPH_TimeTo1.25Baseline_ProperCohort.pptx")
# glm_recovery <- glm(Recover ~ Age+Sex+Hypertension + DiabetesMellitus + IschaemicHeartDisease + MyelolymphoproliferativeDisorders+IndexAKIKDIGOGrade,data=pretty_recovery,family=binomial())
# summary(glm_recovery)
# print(forest_model(glm_recovery,format_options = forest_model_format_options(text_size = 3.5,point_size=3),exponentiate = FALSE))
pretty_death <- km_perfect_nopriorrrt %>% transmute(time=aki_admit_to_death,Death=as.numeric(deceased),Age=factor(agegroup2),Sex=factor(sex),Hypertension=htn,DiabetesMellitus=dm,IschaemicHeartDisease=ihd,IndexAKIKDIGOGrade=factor(aki_kdigo_final),MyelolymphoproliferativeDisorders=myelolymph)
surv_death <- Surv(time=pretty_death$time,event=pretty_death$Death)
fit_death <- survfit(surv_death ~ IndexAKIKDIGOGrade,data=pretty_death)
plot_death_km <- ggsurvplot(fit_death,data=pretty_death,pval=TRUE,conf.int=TRUE,risk.table=TRUE,risk.table.col = "strata", linetype = "strata",surv.median.line = "hv",ggtheme = theme_bw(),legend.title="Index AKI KDIGO Grade",legend.labs=c("1","2","3"),ylab="Survival",break.x.by=365,xlab="Time since Index AKI (days)")
print(plot_death_km)
cox_death <- coxph(surv_death ~ Age+Sex+Hypertension + DiabetesMellitus + IschaemicHeartDisease + MyelolymphoproliferativeDisorders + IndexAKIKDIGOGrade,data=pretty_death)
#plot_death_pretty <- forest_model(cox_death_pretty)
plot_death_cox <- ggforest(cox_death,data=pretty_death)
print(plot_death_cox)
plot_death_nice <- forest_model(cox_death_pretty,format_options = forest_model_format_options(text_size = 3.5,point_size=3),exponentiate = FALSE)
print(plot_death_nice)
create_pptx(plot_death_km,"KM_TimeToDeath_NoPriorRRT_ProperCohort.pptx")
create_pptx(plot_death_nice,"CoxPH_TimeToDeath_NoPriorRRT_ProperCohort.pptx")
print(plot_death_nice)
devtools::install_github("https://github.com/covidclinical/Phase2.1UtilitiesRPackage", subdir="FourCePhase2.1Utilities", upgrade=FALSE)
FourCePhase2.1Utilities::createProject("AKI")
q()
setwd("~/GitHub/Phase2.1AKIRPackage/FourCePhase2.1AKI")
load("~/GitHub/4CE-AKI/diagnoses_comorbids.RData")
save(comorbid_ref,file="data/comorbid_ref.rda")
save(comorbid_icd9_ref,file="data/comorbid_icd9_ref.rda")
save(comorbid_icd10_ref,file="data/comorbid_icd10_ref.rda")
save(thromb_ref,file="data/thromb_ref.rda")
save(thromb_icd9_ref,file="data/thromb_icd9_ref.rda")
save(thromb_icd10_ref,file="data/thromb_icd10_ref.rda")
install.packages("roxygen2")
vignette("roxygen2")
View(comorbid_ref)
View(comorbid_ref)
View(thromb_ref)
View(comorbid_icd10_ref)
View(thromb_ref)
View(comorbid_ref)
comorbid_ref <- read.csv("data-raw/comorbid.csv")
View(comorbid_ref)
thromb_ref <- read.csv("data-raw/thromb_icd_code.csv")
thromb_icd9_ref <- thromb_ref[thromb_ref$icd_version == "DIAG-ICD9",-c(1,4)]
thromb_icd10_ref <- thromb_ref[thromb_ref$icd_version == "DIAG-ICD10",-c(1,4)]
comorbid_icd9_ref <- comorbid_ref[comorbid_ref$icd_version == "DIAG-ICD9",-c(1,4)]
comorbid_icd10_ref <- comorbid_ref[comorbid_ref$icd_version == "DIAG-ICD10",-c(1,4)]
save(comorbid_ref,file="data/comorbid_ref.rda")
save(comorbid_icd9_ref,file="data/comorbid_icd9_ref.rda")
save(comorbid_icd10_ref,file="data/comorbid_icd10_ref.rda")
save(thromb_ref,file="data/thromb_ref.rda")
save(thromb_icd9_ref,file="data/thromb_icd9_ref.rda")
save(thromb_icd10_ref,file="data/thromb_icd10_ref.rda")
load("~/GitHub/Phase2.1AKIRPackage/FourCePhase2.1AKI/data/thromb_icd9_ref.rda")
View(thromb_ref)
View(comorbid_ref)
comorbid_icd9_ref <- comorbid_ref[comorbid_ref$icd_version == "DIAG-ICD9",-c(1,5)]
comorbid_icd10_ref <- comorbid_ref[comorbid_ref$icd_version == "DIAG-ICD10",-c(1,5)]
save(comorbid_icd9_ref,file="data/comorbid_icd9_ref.rda")
save(comorbid_icd10_ref,file="data/comorbid_icd10_ref.rda")
library("tibble")
setwd("~/GitHub/Phase2.1AKIRPackage/FourCePhase2.1AKI")
devtools::document()
